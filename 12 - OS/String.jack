// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxlength;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength<0) {
            do Sys.error(14);
            return this;
        }
        let str = Array.new(maxLength+1);
        let length = 0;
        let maxlength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j>length) {
            do Sys.error(15);
            return 0;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j>length) {
            do Sys.error(16);
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length+1 > maxlength) {
            do Sys.error(17);
            return this;
        }
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(length > 0)) {
            do Sys.error(18);
            return;
        }
        let str[length-1] = 32;
        let length = length -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, index;
        var int digit;
        var boolean neg;
        let value = 0;
        let index = 0;
        let neg = false;
        while (index < length) {
            if (((str[index]>48) | (str[index]<57)) | (str[index] = 45 & index = 0)){
                if ((str[index]>48) & (str[index]<57)) {
                    let digit = str[index] - 48;
                    let value = (value*10) + digit;
                }
                else {
                    let neg = true;
                }
            }
            else {
                if (neg) {
                    return -value;
                }
                else {
                    return value;
                }

            }
            let index = index +1;
        }
        if (neg) {
            return -value;
        }
        else {
            return value;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            let str[length] = 45;
            let length = length +1;
            do help_setInt(-val);
            return;
        }
        else {
            do help_setInt(val);
            return;
        }

    }

    method void help_setInt(int val) {
        var int lastDigit;
        var char cur_c;
        let lastDigit = (val) - (10*(val/10));
        let cur_c = (lastDigit + 48);
        if (val < 10) {
            do appendChar(cur_c);
            return;
        }
        else {
            do help_setInt(val/10);
            do appendChar(cur_c);
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        var char newline;
        let newline = 128;
        return newline;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char backspace;
        let backspace = 129;
        return backspace;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char doublequote;
        let doublequote = 34;
        return doublequote;
    }
}
