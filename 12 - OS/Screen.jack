// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */

class Screen {
    static boolean cur_color;
    static int screen;
    /** Initializes the Screen. */
    function void init() {
        let cur_color = true;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int index;
        let index = 0;
        while (index < 8191) {
            let screen[index] = 0;
            let index = index +1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let cur_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod, new_val, index;
        if ((x<0) | (y<0) | (x>511) | (y>255)) {
            do Sys.error(7);
            return;
        }
        if ((x<0) | (y<0)) {
            do Sys.error(7);
            return;
        }
        let address = 16384 + (32*y) + (x/16);

        let value = Memory.peek(address); //get back the x-row
        let new_val = Math.get_twoTothe(x&(15));

        if (~cur_color) {
            let new_val = ~(new_val);
            let value = value & new_val;
            do Memory.poke(address,value);
        }
        else {
            let new_val = new_val;
            let value = value | new_val;
            do Memory.poke(address,value);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x,y,dx,dy;
        var int a,b,diff;
        var boolean to_left, horizon;

        if ( (x1 < 0) | (x2 < 0) | (y1 < 0) | (y2 < 0) | (x1>511) | (x2>511) | (y1>255) | (y2 > 255) ) {
            do Sys.error(8);
            return;
        }
        let to_left = false;
        let horizon = false;
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        if ((dx<0) & (dy< 0)) {
            let dx = x1 - x2;
            let dy = y1 - y2;
            let x = x2;
            let y = y2;
        }

        if ((dx>0) & (dy< 0)) {
            let to_left = true;
            let dy = y1 - y2;
            let x = x2;
            let y = y2;
        }
        if ((dx<0) & (dy>0)) {
            let to_left = true;
            let dx = x1 - x2;
        }

        if ((dy = 0) & (dx > 0)) {
            let horizon = true;
        }
        if ((dy = 0) & (dx < 0)) {
            let horizon = true;
            let dx = x1 - x2;
            let x = x2;
            let y = y2;
        }

        if ((dy < 0) & (dx = 0)) {
            let dy = y1 - y2;
            let x = x2;
            let y = y2;
        }
        
        while (((a<dx) | (a = dx)) & ((b<dy) | (b = dy))) {
            if (to_left) {
                do Screen.drawPixel(x-a,y+b);
            }
            else {
                do Screen.drawPixel(x+a,y+b);
            }
            if ((diff < 0) | horizon) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx;
        if ( (x1 < 0) | (x2 < 0) | (y1 < 0) | (y2 < 0) | (x1>511) | (x2>511) | (y1>255) | (y2>255) ) {
            do Sys.error(9);
            return;
        }
        let dx = x1;
        while (~(dx > x2)) {
            do Screen.drawLine(dx,y1,dx,y2);
            let dx = dx +1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        if ((x<0) | (y<0) | (x>511) | (y>255)) {
            do Sys.error(12);
            return;
        }
        if (((x-r) < 0) | ((x+r) > 511) | ((y-r)<0) | ((y+r)>255)) {
            do Sys.error(13);
            return;
        }
        let dy = -r;
        let dx = Math.sqrt((r*r) - (dy*dy));
        while (dy < r) {
            do Screen.drawLine(x-dx,y+dy,x+dx,y+dy);
            let dy = dy +1;
            let dx = Math.sqrt((r*r) - (dy*dy));
        }
        return;
    }
}
