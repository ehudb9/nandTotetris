// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freelist;
    static int end;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; //heapbase
        let heap[0] = 0; //next
        let freelist = 2048;
        let end = 2048;
        let heap[1] = 14334; //length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int value;
        let value = ram[address];
        return value;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int cur, next, block;
        var int cur_size;
        if (~(size>0)){
            do Sys.error(5);
            return 0;
        }
        let cur = freelist - 2048;
        let next = heap[freelist - 2048];
        let cur_size = heap[freelist - 2048 + 1];
        while ((cur_size < size + 1) & (~(next = 0))) {
            let cur = next - 2048;
            let cur_size = heap[cur + 1];
            let next = heap[cur];
        }

        if (cur_size > (size + 1)) {
            let cur_size = (cur_size) - (size + 2);  //sub the size from the current block.
            let heap[cur + 1] = cur_size;                //update cur_size
            let block = cur + cur_size + 1; //calculate the base address
            let heap[block - 2048] = 0;                //update the next field of block
            let heap[block -2048 + 1] = size;            //update the size of block
            return (block + 2);
        }
        do Sys.error(6);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let heap[end - 2048] = o-2;  // update and add the new last block in free list
        let end = o-2;
        return;
    }    
}
